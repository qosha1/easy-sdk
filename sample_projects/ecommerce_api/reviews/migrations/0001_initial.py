# Generated by Django 5.2.5 on 2025-08-21 23:05

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("orders", "0001_initial"),
        ("products", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Average rating (0.00-5.00)",
                        max_digits=3,
                    ),
                ),
                ("total_reviews", models.PositiveIntegerField(default=0)),
                ("rating_1_count", models.PositiveIntegerField(default=0)),
                ("rating_2_count", models.PositiveIntegerField(default=0)),
                ("rating_3_count", models.PositiveIntegerField(default=0)),
                ("rating_4_count", models.PositiveIntegerField(default=0)),
                ("rating_5_count", models.PositiveIntegerField(default=0)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rating_stats",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Rating Statistics",
                "verbose_name_plural": "Product Rating Statistics",
            },
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Review title/summary", max_length=200),
                ),
                ("comment", models.TextField(help_text="Detailed review content")),
                (
                    "is_verified_purchase",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this review is from a verified purchase",
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this review is approved for display",
                    ),
                ),
                (
                    "helpful_votes",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of users who found this review helpful",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "order",
                    models.ForeignKey(
                        blank=True,
                        help_text="Order this review is associated with (for verified purchases)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviews",
                        to="orders.order",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="products.product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReviewHelpful",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="helpful_by",
                        to="reviews.review",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("response_text", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "responder",
                    models.ForeignKey(
                        help_text="User who responded (typically store owner/admin)",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "review",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="response",
                        to="reviews.review",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["product", "is_approved"], name="reviews_rev_product_99e47c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(fields=["user"], name="reviews_rev_user_id_a65d48_idx"),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(fields=["rating"], name="reviews_rev_rating_2db6dd_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="review",
            unique_together={("product", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="reviewhelpful",
            unique_together={("review", "user")},
        ),
    ]
