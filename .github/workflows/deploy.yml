name: Test, Build and Deploy Django Docs Generator

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest pytest-cov flake8 mypy bandit
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/easy_sdk --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit with warning on other issues
        flake8 src/easy_sdk --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy src/easy_sdk --ignore-missing-imports --no-strict-optional || true
    
    - name: Security check with bandit
      run: |
        bandit -r src/easy_sdk -f json || true
    
    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=src/easy_sdk --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
    
    - name: Auto-increment version
      id: version
      run: |
        # Get current version from __init__.py
        CURRENT_VERSION=$(grep "__version__" src/easy_sdk/__init__.py | cut -d'"' -f2)
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Update version in __init__.py (pyproject.toml now reads from this dynamically)
        sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" src/easy_sdk/__init__.py
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check build artifacts
      run: |
        twine check dist/*
    
    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add src/easy_sdk/__init__.py
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Bump version to ${{ steps.version.outputs.version }} [skip ci]"
          git push
        fi

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Install publish dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Check if version exists on PyPI
      run: |
        pip index versions easy-sdk || echo "Package not found on PyPI (this is okay for first upload)"
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/* --verbose
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: Release v${{ needs.build.outputs.version }}
        body: |
          ## Changes in this Release
          
          This release was automatically created from the latest commit to main.
          
          ### What's Changed
          - Auto-deployment from commit: ${{ github.sha }}
          - See commit messages for detailed changes
          
          ### Installation
          ```bash
          pip install easy-sdk==${{ needs.build.outputs.version }}
          ```
          
          Full Changelog: https://github.com/${{ github.repository }}/commits/main
        draft: false
        prerelease: false

  deploy-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package for testing
      run: |
        python -m build
    
    - name: Check build (dry run)
      run: |
        twine check dist/*
        echo "âœ… Package build successful - ready for deployment when merged to main" 