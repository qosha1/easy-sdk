name: CI - Django Docs Generator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} with Django ${{ matrix.django-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        django-version: ["4.2", "5.0"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.django-version }}-
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install "Django>=${{ matrix.django-version }},<${{ matrix.django-version }}.99"
        pip install -e .[dev]

    - name: Verify Django version
      run: |
        python -c "import django; print(f'Django version: {django.VERSION}')"
        python -c "import sys; print(f'Python version: {sys.version}')"

    - name: Run linting
      run: |
        flake8 src/easy_sdk --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/easy_sdk --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Run type checking
      run: |
        mypy src/easy_sdk --ignore-missing-imports --no-strict-optional || true

    - name: Run security scan
      run: |
        bandit -r src/easy_sdk -f json || true

    - name: Run tests with pytest
      continue-on-error: true
      run: |
        pytest tests/ -v --cov=src/easy_sdk --cov-report=xml --cov-report=term-missing
      env:
        DJANGO_VERSION: ${{ matrix.django-version }}

    - name: Test CLI functionality
      run: |
        easy-sdk --help
        easy-sdk --version

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.django-version == '4.2'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-ai-providers:
    name: Test AI Provider Integration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,ai]

    - name: Test AI provider imports
      run: |
        python -c "
        from easy_sdk.ai.providers import OpenAIProvider, AnthropicProvider, LocalProvider
        print('✅ All AI providers import successfully')
        "

    - name: Test configuration with AI providers
      run: |
        python -c "
        from easy_sdk.core.config import Config
        config = Config()
        config.ai_provider = 'openai'
        config.ai_model = 'gpt-4'
        print('✅ AI configuration works')
        "

  test-documentation-generation:
    name: Test Documentation Generation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Test Sphinx documentation generation
      run: |
        python -c "
        from easy_sdk.generators.sphinx_generator import SphinxGenerator
        from easy_sdk.core.config import Config
        config = Config()
        generator = SphinxGenerator(config)
        print('✅ Sphinx generator initializes successfully')
        "

    - name: Test TypeScript generation
      run: |
        python -c "
        from easy_sdk.generators.typescript_generator import TypeScriptGenerator
        from easy_sdk.core.config import Config
        config = Config()
        generator = TypeScriptGenerator(config)
        print('✅ TypeScript generator initializes successfully')
        "

    - name: Test template rendering
      run: |
        python -c "
        from easy_sdk.templates.template_engine import TemplateEngine
        engine = TemplateEngine()
        print('✅ Template engine initializes successfully')
        "

  build-test:
    name: Build and Test Package
    runs-on: ubuntu-latest
    needs: [test, test-ai-providers, test-documentation-generation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel

    - name: Build package
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*

    - name: Test installation from built package
      run: |
        pip install dist/*.whl
        easy-sdk --version
        python -c "import easy_sdk; print(f'Installed version: {easy_sdk.__version__}')"

    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 7